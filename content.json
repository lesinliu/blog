{"pages":[{"title":"关于","text":"","link":"/about/index.html"}],"posts":[{"title":"JS中的for","text":"JS中的for for 语句用于创建一个循环，它包含了三个可选的表达式，三个可选的表达式包围在圆括号中并由分号分隔， 后跟一个在循环中执行的语句（通常是一个块语句）。 for ([initialization]; [condition]; [final-expression]) statement initialization 一个表达式 (包含赋值语句) 或者变量声明。典型地被用于初始化一个计数器。该表达式可以使用var或let关键字声明新的变量，使用var声明的变量不是该循环的局部变量，而是与for循环处在同样的作用域中。用let声明的变量是语句的局部变量。该表达式的结果无意义。 condition 一个条件表达式被用于确定每一次循环是否能被执行。如果该表达式的结果为true， statement 将被执行。 这个表达式是可选的。如果被忽略，那么就被认为永远为真。如果计算结果为假，那么执行流程将被跳到for语句结构后面的第一条语句。 final-expression 每次循环的最后都要执行的表达式。执行时机是在下一次condition的计算之前。通常被用于更新或者递增计数器变量。 statement 只要condition的结果为true就会被执行的语句。 要在循环体内执行多条语句，使用一个块语句（{ … }）来包含要执行的语句。没有任何语句要执行，使用一个空语句（;）。 js中的for in for…in语句以任意顺序遍历一个对象自有的、继承的、可枚举的、非Symbol的属性。对于每个不同的属性，语句都会被执行。 for (variable in object) {...} // variable 在每次迭代时，将不同的属性名分配给变量。 // object 被迭代枚举其属性的对象。 for…in不应该用于迭代一个 Array，其中索引顺序很重要。数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。 js中的for of for…of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句 for (variable of iterable) { //statements } // variable 在每次迭代中，将不同属性的值分配给变量。 // iterable 被迭代枚举其属性的对象。 for…in 语句以原始插入顺序迭代对象的可枚举属性。for…of 语句遍历可迭代对象定义要迭代的数据。 forEach forEach() 方法对数组的每个元素执行一次提供的函数。return undefined arr.forEach(callback[, thisArg]); callback 为数组中每个元素执行的函数，该函数接收三个参数： currentValue:数组中正在处理的当前元素。 index:索引(可选) array:forEach() 方法正在操作的数组。（可选） thisArg 可选参数。当执行回调函数时用作 this 的值(参考对象)。 forEach 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。forEach不直接改变调用它的对象，但是对象可能会被callback改变。）没有办法中止或者跳出 forEach() 循环，除了抛出一个异常。 MDN 笔记","link":"/2019/05/20/JS%E4%B8%AD%E7%9A%84for/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment 写好blog后$ hexo clean$ hexo g$ hexo d","link":"/2019/04/26/hello-world/"},{"title":"从输入网址到展示界面浏览器经历了什么?","text":"URL==&gt;页面 地址栏输入网址,回车,浏览器会开启一个线程分析URL,确定是http还是https,然后调用浏览器引擎中的方法加载url(如webview中的loadUrl) 通过dns解析域名获取到IP,然后向该IP发送get请求(携带cookies, userAgent等信息) http会话,浏览器发送报文到服务器, 服务器处理报文(处理逻辑以及读取数据库)并返回响应报文,通过标记对比浏览器是否有缓存,有=&gt;304,无=&gt;200+对应内容 浏览器下载内容, 304时从本地缓存读取 浏览器解析下载的html构建DOM,加载css,js…等,设置缓存 页面结合CSS规则解析渲染DOM,并根据JS操作DOM,读取缓存,执行事件,展示最终页面","link":"/2019/09/27/%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E5%B1%95%E7%A4%BA%E7%95%8C%E9%9D%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/"},{"title":"js中的valueOf和toString","text":"js中的valueOf和toString null 和 undefined 没有这两个方法；隐式自动类型转换时会自动调用；涉及到操作符的问题，valueOf的优先级比toString的优先级高，涉及到显示问题，toString方法优先级比valueOf方法高。 valueOf valueOf方法返回指定对象的原始值，大多情况下都无需手动调用该方法，js会自动调用。但是复合对象大多数情况无法真正表示一个原始值，此时valueOf方法返回对象本身。该方法会被object后面对象继承，并且每个核心对象都会覆盖该方法。以返回合适的值来使用。 对象 valueOf返回值 Array 数组对象本身 Boolean 布尔值 Date 时间戳 Function 函数本身 Number 数字 Object 对象本身（默认设置） String 字符串 Math 和 Error 对象没有 valueOf 方法。 toString 返回对象的字面量表示","link":"/2019/07/23/js%E4%B8%AD%E7%9A%84valueOf%E5%92%8CtoString/"},{"title":"JS中的拷贝","text":"基本数据类型 number， string， boolean, undefined, null js中基本数据类型保存着栈内存中,所有的拷贝都是在栈中复制一个副本 var a = 1; var b = a; b = 3; console.log(a); // 1 console.log(b); // 3 ###引用类型 数组（array） 对象 (object) 引用类型中浅拷贝复制的是堆地址，故拷贝值于原值公用同一块堆内存，彼此修改会影响彼此。所以我们在对象拷贝往往期望的的是深拷贝 通过JSON.parse(JSON.stringfy(object))进行深拷贝 （会重置constructor为object,只能解析json数据，function,regexp不行） 对于元素为基本类型数组来说可以通过循环挨个拷贝，也可以通过slice或者concat方法来获得深拷贝对象，这两个方法不操作原数组。const arr = [1,2,3]; const copyArr = arr.slice(0); copyArr[0] = 'a'; // arr [1,2,3] // copyArr ['a',2,3] 循环递归拷贝function deepCopy(obj) { var result = Array.isArray(obj) ? [] : {}; for (var key in obj) { if (obj.hasOwnProperty(key)) { if (typeof obj[key] === 'object') { result[key] = deepCopy(obj[key]); //递归复制 } else { result[key] = obj[key]; } } } return result; }","link":"/2019/05/20/JS%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D/"},{"title":"插入图片测试","text":"汗汗汗","link":"/2020/04/09/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"},{"title":"测试博客","text":"测试测试测试","link":"/2019/04/26/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"MDN","slug":"MDN","link":"/tags/MDN/"},{"name":"JS 浏览器","slug":"JS-浏览器","link":"/tags/JS-%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"JS MDN","slug":"JS-MDN","link":"/tags/JS-MDN/"},{"name":"JS","slug":"JS","link":"/tags/JS/"},{"name":"test","slug":"test","link":"/tags/test/"}],"categories":[{"name":"test","slug":"test","link":"/categories/test/"}]}